//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MedievalWarfare.Client.Proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerInfo", Namespace="http://schemas.datacontract.org/2004/07/MedievalWarfare.WcfLib.Entities")]
    [System.SerializableAttribute()]
    public partial class PlayerInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MapInfo", Namespace="http://schemas.datacontract.org/2004/07/MedievalWarfare.WcfLib.Entities")]
    [System.SerializableAttribute()]
    public partial class MapInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Command", Namespace="http://schemas.datacontract.org/2004/07/MedievalWarfare.WcfLib.Entities")]
    [System.SerializableAttribute()]
    public partial class Command : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.IServerMethods", CallbackContract=typeof(MedievalWarfare.Client.Proxy.IServerMethodsCallback))]
    public interface IServerMethods {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/Join", ReplyAction="http://tempuri.org/IServerMethods/JoinResponse")]
        void Join(MedievalWarfare.Client.Proxy.PlayerInfo info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/Join", ReplyAction="http://tempuri.org/IServerMethods/JoinResponse")]
        System.Threading.Tasks.Task JoinAsync(MedievalWarfare.Client.Proxy.PlayerInfo info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/Leave", ReplyAction="http://tempuri.org/IServerMethods/LeaveResponse")]
        void Leave(MedievalWarfare.Client.Proxy.PlayerInfo info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/Leave", ReplyAction="http://tempuri.org/IServerMethods/LeaveResponse")]
        System.Threading.Tasks.Task LeaveAsync(MedievalWarfare.Client.Proxy.PlayerInfo info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/GetGameState", ReplyAction="http://tempuri.org/IServerMethods/GetGameStateResponse")]
        MedievalWarfare.Client.Proxy.MapInfo GetGameState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/GetGameState", ReplyAction="http://tempuri.org/IServerMethods/GetGameStateResponse")]
        System.Threading.Tasks.Task<MedievalWarfare.Client.Proxy.MapInfo> GetGameStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/EndTurn", ReplyAction="http://tempuri.org/IServerMethods/EndTurnResponse")]
        void EndTurn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/EndTurn", ReplyAction="http://tempuri.org/IServerMethods/EndTurnResponse")]
        System.Threading.Tasks.Task EndTurnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/UpdateMap", ReplyAction="http://tempuri.org/IServerMethods/UpdateMapResponse")]
        void UpdateMap(MedievalWarfare.Client.Proxy.MapInfo mapInfo, MedievalWarfare.Client.Proxy.Command cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/UpdateMap", ReplyAction="http://tempuri.org/IServerMethods/UpdateMapResponse")]
        System.Threading.Tasks.Task UpdateMapAsync(MedievalWarfare.Client.Proxy.MapInfo mapInfo, MedievalWarfare.Client.Proxy.Command cmd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/GetData", ReplyAction="http://tempuri.org/IServerMethods/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/GetData", ReplyAction="http://tempuri.org/IServerMethods/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerMethodsCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/ActionResult", ReplyAction="http://tempuri.org/IServerMethods/ActionResultResponse")]
        void ActionResult(bool result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/StartTurn", ReplyAction="http://tempuri.org/IServerMethods/StartTurnResponse")]
        void StartTurn(MedievalWarfare.Client.Proxy.MapInfo mapInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerMethods/Update", ReplyAction="http://tempuri.org/IServerMethods/UpdateResponse")]
        void Update(MedievalWarfare.Client.Proxy.Command cmd);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerMethodsChannel : MedievalWarfare.Client.Proxy.IServerMethods, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerMethodsClient : System.ServiceModel.DuplexClientBase<MedievalWarfare.Client.Proxy.IServerMethods>, MedievalWarfare.Client.Proxy.IServerMethods {
        
        public ServerMethodsClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerMethodsClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerMethodsClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Join(MedievalWarfare.Client.Proxy.PlayerInfo info) {
            base.Channel.Join(info);
        }
        
        public System.Threading.Tasks.Task JoinAsync(MedievalWarfare.Client.Proxy.PlayerInfo info) {
            return base.Channel.JoinAsync(info);
        }
        
        public void Leave(MedievalWarfare.Client.Proxy.PlayerInfo info) {
            base.Channel.Leave(info);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(MedievalWarfare.Client.Proxy.PlayerInfo info) {
            return base.Channel.LeaveAsync(info);
        }
        
        public MedievalWarfare.Client.Proxy.MapInfo GetGameState() {
            return base.Channel.GetGameState();
        }
        
        public System.Threading.Tasks.Task<MedievalWarfare.Client.Proxy.MapInfo> GetGameStateAsync() {
            return base.Channel.GetGameStateAsync();
        }
        
        public void EndTurn() {
            base.Channel.EndTurn();
        }
        
        public System.Threading.Tasks.Task EndTurnAsync() {
            return base.Channel.EndTurnAsync();
        }
        
        public void UpdateMap(MedievalWarfare.Client.Proxy.MapInfo mapInfo, MedievalWarfare.Client.Proxy.Command cmd) {
            base.Channel.UpdateMap(mapInfo, cmd);
        }
        
        public System.Threading.Tasks.Task UpdateMapAsync(MedievalWarfare.Client.Proxy.MapInfo mapInfo, MedievalWarfare.Client.Proxy.Command cmd) {
            return base.Channel.UpdateMapAsync(mapInfo, cmd);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
    }
}
